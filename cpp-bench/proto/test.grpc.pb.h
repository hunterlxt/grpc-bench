// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto
#ifndef GRPC_test_2eproto__INCLUDED
#define GRPC_test_2eproto__INCLUDED

#include "test.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace test {

class TestService final {
 public:
  static constexpr char const* service_full_name() {
    return "test.TestService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::test::RpcRequest>> GetStream(::grpc::ClientContext* context, ::test::RpcResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::test::RpcRequest>>(GetStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::test::RpcRequest>> AsyncGetStream(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::test::RpcRequest>>(AsyncGetStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::test::RpcRequest>> PrepareAsyncGetStream(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::test::RpcRequest>>(PrepareAsyncGetStreamRaw(context, response, cq));
    }
    virtual ::grpc::Status GetUnary(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::test::RpcResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::RpcResponse>> AsyncGetUnary(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::RpcResponse>>(AsyncGetUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::RpcResponse>> PrepareAsyncGetUnary(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::test::RpcResponse>>(PrepareAsyncGetUnaryRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetStream(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::experimental::ClientWriteReactor< ::test::RpcRequest>* reactor) = 0;
      virtual void GetUnary(::grpc::ClientContext* context, const ::test::RpcRequest* request, ::test::RpcResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::RpcResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUnary(::grpc::ClientContext* context, const ::test::RpcRequest* request, ::test::RpcResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::RpcResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::test::RpcRequest>* GetStreamRaw(::grpc::ClientContext* context, ::test::RpcResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::test::RpcRequest>* AsyncGetStreamRaw(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::test::RpcRequest>* PrepareAsyncGetStreamRaw(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::RpcResponse>* AsyncGetUnaryRaw(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::test::RpcResponse>* PrepareAsyncGetUnaryRaw(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::test::RpcRequest>> GetStream(::grpc::ClientContext* context, ::test::RpcResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::test::RpcRequest>>(GetStreamRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::test::RpcRequest>> AsyncGetStream(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::test::RpcRequest>>(AsyncGetStreamRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::test::RpcRequest>> PrepareAsyncGetStream(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::test::RpcRequest>>(PrepareAsyncGetStreamRaw(context, response, cq));
    }
    ::grpc::Status GetUnary(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::test::RpcResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::RpcResponse>> AsyncGetUnary(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::RpcResponse>>(AsyncGetUnaryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::RpcResponse>> PrepareAsyncGetUnary(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::test::RpcResponse>>(PrepareAsyncGetUnaryRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetStream(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::experimental::ClientWriteReactor< ::test::RpcRequest>* reactor) override;
      void GetUnary(::grpc::ClientContext* context, const ::test::RpcRequest* request, ::test::RpcResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::RpcResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUnary(::grpc::ClientContext* context, const ::test::RpcRequest* request, ::test::RpcResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::RpcResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::test::RpcRequest>* GetStreamRaw(::grpc::ClientContext* context, ::test::RpcResponse* response) override;
    ::grpc::ClientAsyncWriter< ::test::RpcRequest>* AsyncGetStreamRaw(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::test::RpcRequest>* PrepareAsyncGetStreamRaw(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::RpcResponse>* AsyncGetUnaryRaw(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::test::RpcResponse>* PrepareAsyncGetUnaryRaw(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetStream_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUnary_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::test::RpcRequest>* reader, ::test::RpcResponse* response);
    virtual ::grpc::Status GetUnary(::grpc::ServerContext* context, const ::test::RpcRequest* request, ::test::RpcResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::test::RpcRequest>* /*reader*/, ::test::RpcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::test::RpcResponse, ::test::RpcRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUnary() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUnary(::grpc::ServerContext* /*context*/, const ::test::RpcRequest* /*request*/, ::test::RpcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUnary(::grpc::ServerContext* context, ::test::RpcRequest* request, ::grpc::ServerAsyncResponseWriter< ::test::RpcResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStream<WithAsyncMethod_GetUnary<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetStream() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::test::RpcRequest, ::test::RpcResponse>(
          [this] { return this->GetStream(); }));
    }
    ~ExperimentalWithCallbackMethod_GetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::test::RpcRequest>* /*reader*/, ::test::RpcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::test::RpcRequest, ::test::RpcResponse>* GetStream() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::test::RpcRequest, ::test::RpcResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetUnary() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::test::RpcRequest, ::test::RpcResponse>(
          [this](::grpc::ServerContext* context,
                 const ::test::RpcRequest* request,
                 ::test::RpcResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetUnary(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetUnary(
        ::grpc::experimental::MessageAllocator< ::test::RpcRequest, ::test::RpcResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::test::RpcRequest, ::test::RpcResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUnary(::grpc::ServerContext* /*context*/, const ::test::RpcRequest* /*request*/, ::test::RpcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetUnary(::grpc::ServerContext* /*context*/, const ::test::RpcRequest* /*request*/, ::test::RpcResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetStream<ExperimentalWithCallbackMethod_GetUnary<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::test::RpcRequest>* /*reader*/, ::test::RpcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUnary() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUnary(::grpc::ServerContext* /*context*/, const ::test::RpcRequest* /*request*/, ::test::RpcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::test::RpcRequest>* /*reader*/, ::test::RpcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUnary() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUnary(::grpc::ServerContext* /*context*/, const ::test::RpcRequest* /*request*/, ::test::RpcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUnary(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetStream() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetStream(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::test::RpcRequest>* /*reader*/, ::test::RpcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetStream() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetUnary() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetUnary(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUnary(::grpc::ServerContext* /*context*/, const ::test::RpcRequest* /*request*/, ::test::RpcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetUnary(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUnary : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUnary() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::test::RpcRequest, ::test::RpcResponse>(std::bind(&WithStreamedUnaryMethod_GetUnary<BaseClass>::StreamedGetUnary, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetUnary() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUnary(::grpc::ServerContext* /*context*/, const ::test::RpcRequest* /*request*/, ::test::RpcResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUnary(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::test::RpcRequest,::test::RpcResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetUnary<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetUnary<Service > StreamedService;
};

}  // namespace test


#endif  // GRPC_test_2eproto__INCLUDED
