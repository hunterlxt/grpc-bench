// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: test.proto

#include "test.pb.h"
#include "test.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace test {

static const char* TestService_method_names[] = {
  "/test.TestService/GetStream",
  "/test.TestService/GetUnary",
};

std::unique_ptr< TestService::Stub> TestService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TestService::Stub> stub(new TestService::Stub(channel));
  return stub;
}

TestService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetStream_(TestService_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetUnary_(TestService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::test::RpcRequest>* TestService::Stub::GetStreamRaw(::grpc::ClientContext* context, ::test::RpcResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::test::RpcRequest>::Create(channel_.get(), rpcmethod_GetStream_, context, response);
}

void TestService::Stub::experimental_async::GetStream(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::experimental::ClientWriteReactor< ::test::RpcRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::test::RpcRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_GetStream_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::test::RpcRequest>* TestService::Stub::AsyncGetStreamRaw(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::test::RpcRequest>::Create(channel_.get(), cq, rpcmethod_GetStream_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::test::RpcRequest>* TestService::Stub::PrepareAsyncGetStreamRaw(::grpc::ClientContext* context, ::test::RpcResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::test::RpcRequest>::Create(channel_.get(), cq, rpcmethod_GetStream_, context, response, false, nullptr);
}

::grpc::Status TestService::Stub::GetUnary(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::test::RpcResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetUnary_, context, request, response);
}

void TestService::Stub::experimental_async::GetUnary(::grpc::ClientContext* context, const ::test::RpcRequest* request, ::test::RpcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUnary_, context, request, response, std::move(f));
}

void TestService::Stub::experimental_async::GetUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::RpcResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetUnary_, context, request, response, std::move(f));
}

void TestService::Stub::experimental_async::GetUnary(::grpc::ClientContext* context, const ::test::RpcRequest* request, ::test::RpcResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetUnary_, context, request, response, reactor);
}

void TestService::Stub::experimental_async::GetUnary(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::test::RpcResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetUnary_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::test::RpcResponse>* TestService::Stub::AsyncGetUnaryRaw(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::test::RpcResponse>::Create(channel_.get(), cq, rpcmethod_GetUnary_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::test::RpcResponse>* TestService::Stub::PrepareAsyncGetUnaryRaw(::grpc::ClientContext* context, const ::test::RpcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::test::RpcResponse>::Create(channel_.get(), cq, rpcmethod_GetUnary_, context, request, false);
}

TestService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< TestService::Service, ::test::RpcRequest, ::test::RpcResponse>(
          std::mem_fn(&TestService::Service::GetStream), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TestService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TestService::Service, ::test::RpcRequest, ::test::RpcResponse>(
          std::mem_fn(&TestService::Service::GetUnary), this)));
}

TestService::Service::~Service() {
}

::grpc::Status TestService::Service::GetStream(::grpc::ServerContext* context, ::grpc::ServerReader< ::test::RpcRequest>* reader, ::test::RpcResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TestService::Service::GetUnary(::grpc::ServerContext* context, const ::test::RpcRequest* request, ::test::RpcResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace test

